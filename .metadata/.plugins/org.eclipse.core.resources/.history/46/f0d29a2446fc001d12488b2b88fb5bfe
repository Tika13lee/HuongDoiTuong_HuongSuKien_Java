package tuan8_30_QLNV;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.sql.SQLException;
import java.util.ArrayList;

import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JComboBox;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableModel;

//import connectDB.ConnectDB;
//import dao.NhanVien_DAO;
//import dao.PhongBan_DAO;
//import entity.NhanVien;
//import entity.PhongBan;

public class NhanVien_GUI extends JFrame implements ActionListener, MouseListener {

	private static final long serialVersionUID = 1L;

	private JTable tableNhanVien;
	private DefaultTableModel modelNhanVien;

	private JTextField txtMaNV;
	private JTextField txtHo;
	private JTextField txtTen;
	private JTextField txtTuoi;
	private JTextField txtTienLuong;
	private JTextField txtTim;
	private JButton btnTim;
	private JButton btnThem;
	private JButton btnXoa;
	private JButton btnSua;
	private JButton btnXoaTrang;
	private JButton btnLoc;
	private JCheckBox chkNu;
	private JComboBox<String> cboPhongBan;

	private NhanVien_DAO nv_dao;
	private PhongBan_DAO pb;

	public NhanVien_GUI() {

		// khởi tạo kết nối đến CSDL
		try {
			ConnectDB.getInstance().connect();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		nv_dao = new NhanVien_DAO();
		pb = new PhongBan_DAO();

		setTitle("^-^");
		setSize(800, 500);
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);

		JLabel lblTieuDe;
		lblTieuDe = new JLabel("THÔNG TIN NHÂN VIÊN");
		lblTieuDe.setFont(new Font("Arial", Font.BOLD, 20));
		lblTieuDe.setForeground(Color.blue);

		Box b = Box.createVerticalBox();

		Box b11, b1, b2, b3, b4;
		JLabel lblMaNV, lblHo, lblTuoi, lblPhai, lblTienLuong;

		b.add(b11 = Box.createHorizontalBox());
		b11.add(lblTieuDe);
		b.add(b1 = Box.createHorizontalBox());
		b.add(Box.createVerticalStrut(10));
		b1.add(lblMaNV = new JLabel("Mã nhân viên:  "));
		b1.add(txtMaNV = new JTextField());

		b.add(b2 = Box.createHorizontalBox());
		b.add(Box.createVerticalStrut(10));
		b2.add(lblHo = new JLabel("Họ: "));
		b2.add(txtHo = new JTextField());
		b2.add(new JLabel("Tên nhân viên: "));
		b2.add(txtTen = new JTextField());

		b.add(b3 = Box.createHorizontalBox());
		b.add(Box.createVerticalStrut(10));
		b3.add(lblTuoi = new JLabel("Tuổi: "));
		b3.add(txtTuoi = new JTextField());
		b3.add(lblPhai = new JLabel("Phái: "));
		b3.add(chkNu = new JCheckBox("Nữ"));

		b.add(b4 = Box.createHorizontalBox());
		b.add(Box.createVerticalStrut(10));
		b4.add(lblTienLuong = new JLabel("Tiền lương: "));
		b4.add(txtTienLuong = new JTextField());
		b4.add(new JLabel("Phòng Ban: "));

		// set text
		txtMaNV.setText("13");
		txtHo.setText("Ha Phuc");
		txtTen.setText("Thinh");
		txtTuoi.setText("20");
		txtTienLuong.setText("10000000");

		lblHo.setPreferredSize(lblMaNV.getPreferredSize());
		lblPhai.setPreferredSize(lblMaNV.getPreferredSize());
		lblTienLuong.setPreferredSize(lblMaNV.getPreferredSize());
		lblTuoi.setPreferredSize(lblMaNV.getPreferredSize());
//		cboPhongBan.setPreferredSize(lblMaNV.getPreferredSize());
		b.add(Box.createVerticalStrut(10));
		add(b, BorderLayout.NORTH);

		// create table
		String[] colHeader = { "Mã NV", "Họ NV", "Tên NV", "Tuổi", "Phái", "Lương", "Phòng ban" };
		modelNhanVien = new DefaultTableModel(colHeader, 0);
		tableNhanVien = new JTable(modelNhanVien);
		add(new JScrollPane(tableNhanVien), BorderLayout.CENTER);

		// Tạo và đổ dữ liệu vào comboBox
		b4.add(cboPhongBan = new JComboBox<String>());
		cboPhongBan.setEditable(true);
		ArrayList<PhongBan> listPB = pb.getAllPhongBan();
		for (PhongBan p : listPB) {
			cboPhongBan.addItem(p.getMaPhong());
		}

		// doc du lieu tu database SQL vao Jtable
		ArrayList<NhanVien> listNV = nv_dao.getalltbNhanVien();
		DocDuLieuDatabaseVaoTable(listNV);

		// south
		JPanel p = new JPanel();
		add(p, BorderLayout.SOUTH);
		JPanel pnlLeft, pnlRight;
		p.add(pnlLeft = new JPanel());
		p.add(pnlRight = new JPanel());

		pnlLeft.add(lblTim = new JLabel("Nhập mã số cần tìm: "));
		pnlLeft.add(txtTim = new JTextField(10));
		pnlLeft.add(btnTim = new JButton("Tìm"));

		pnlRight.add(btnThem = new JButton("Thêm"));
		pnlRight.add(btnXoaTrang = new JButton("Xóa trắng"));
		pnlRight.add(btnXoa = new JButton("Xóa"));
		pnlRight.add(btnSua = new JButton("Sua"));
		pnlRight.add(btnLoc = new JButton("Loc theo Ph Ban"));

		// event
		btnTim.addActionListener(this);
		btnThem.addActionListener(this);
		btnXoa.addActionListener(this);
		btnLoc.addActionListener(this);
		btnXoaTrang.addActionListener(this);
		btnSua.addActionListener(this);
		tableNhanVien.addMouseListener(this);
	}

	public void DocDuLieuDatabaseVaoTable(ArrayList<NhanVien> ds) {
		modelNhanVien.setRowCount(0);
//		ArrayList<NhanVien> list = nv_dao.getalltbNhanVien();
		for (NhanVien nv : ds) {
			modelNhanVien.addRow(new Object[] { nv.getMaNV(), nv.getHo(), nv.getTen(), nv.getTuoi(),
					nv.isPhai() ? "Nam" : "Nữ", nv.getTienLuong(), nv.getPhong().getMaPhong() });
		}
	}

	public static void main(String[] args) {
		new NhanVien_GUI().setVisible(true);
	}

	// regex
	private boolean validData() {
		String ma = txtMaNV.getText().trim();
		String ho = txtHo.getText().trim();
		String ten = txtTen.getText().trim();
		String tuoi = txtTuoi.getText().trim();
		String tien = txtTienLuong.getText().trim();

		if (!(ten.length() > 0 && ten.matches("[A-Za-z ]+"))) {
			JOptionPane.showMessageDialog(this, "Error: tên không được rỗng, không chứa ký tự số, ký tự đặc biệt");
			return false;
		}

		if (!(ho.length() > 0 && ho.matches("[A-Za-z ]+"))) {
			JOptionPane.showMessageDialog(this, "Error: họ không được rỗng, không chứa ký tự số, ký tự đặc biệt");
			return false;
		}

		if (tuoi.length() > 0) {
			try {
				int age = Integer.parseInt(txtTuoi.getText());
				if (age < 0) {
					JOptionPane.showMessageDialog(this, "Error: Tuổi không được âm");
					return false;
				}
			} catch (NumberFormatException e) {
				JOptionPane.showMessageDialog(this, "Tuổi phải là số nguyên dương");
				return false;
			}
		}

		if (tien.length() > 0) {
			try {
				double x = Double.parseDouble(tien);
				if (x < 0) {
					JOptionPane.showMessageDialog(this, "Tiền lương phải lớn hơn hoặc bằng 0");
					return false;
				}
			} catch (NumberFormatException e) {
				JOptionPane.showMessageDialog(this, "Tiền lương phải nhập số dương");
				return false;
			}
		}
		return true;
	}

	// tạo nhân viên
	private NhanVien createNhanVien() {
		int ma = Integer.parseInt(txtMaNV.getText().trim());
		String ho = txtHo.getText().trim();
		String ten = txtTen.getText().trim();
		int tuoi = Integer.parseInt(txtTuoi.getText().trim());
		double tien = Double.parseDouble(txtTienLuong.getText().trim());

		boolean phai = true;
		if (chkNu.isSelected()) {
			phai = false;
		}
		String maP = cboPhongBan.getSelectedItem().toString();
		PhongBan p = new PhongBan(maP);

		NhanVien nv = new NhanVien(ma, ho, ten, tuoi, phai, tien, p);
		return nv;
	}

	// xoa trang
	private void xoaTrang() {
		txtHo.setText("");
		txtMaNV.setText("");
		txtTen.setText("");
		txtTuoi.setText("");
		txtTienLuong.setText("");
		txtMaNV.requestFocus();
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		Object o = e.getSource();
		if (o.equals(btnThem)) {
			if (validData()) {
				NhanVien nv = createNhanVien();
				if (nv_dao.createNV(nv)) {
					JOptionPane.showMessageDialog(this, "Them thành công");
					ArrayList<NhanVien> ds = nv_dao.getalltbNhanVien();
					DocDuLieuDatabaseVaoTable(ds);
				} else
					JOptionPane.showMessageDialog(this, "Trùng mã");
			}
		}
		if (o.equals(btnXoa)) {
			int r = tableNhanVien.getSelectedRow();
			if (r != -1) {
				if (JOptionPane.showConfirmDialog(this, "Ban chac muon xoa dong nay", "Canh bao",
						JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
					int ma = Integer.parseInt(modelNhanVien.getValueAt(r, 0).toString());
					nv_dao.xoaNVTheoMa(ma);
					JOptionPane.showMessageDialog(this, "Xóa thành công");
					modelNhanVien.removeRow(r);
				}
			} else {
				JOptionPane.showMessageDialog(this, "Vui lòng chọn dòng cần xoá");
			}

		}
		if (o.equals(btnXoaTrang)) {
			xoaTrang();
		}
		if (o.equals(btnTim)) {
			String ma = txtTim.getText().trim();
			if (ma.equals("")) {
				JOptionPane.showMessageDialog(this, "Vui lòng nhập mã nhân viên cần tìm");
			} else {
				int maNV = Integer.parseInt(ma);
				ArrayList<NhanVien> ds = nv_dao.getNVTheoMa(maNV);
				DocDuLieuDatabaseVaoTable(ds);
			}
		}
		if (o.equals(btnLoc)) {
			String ma = cboPhongBan.getSelectedItem().toString();
			ArrayList<NhanVien> ds = nv_dao.getNhanVienTheoPhongBan(ma);
			DocDuLieuDatabaseVaoTable(ds);
		}
		if (o.equals(btnSua)) {
			int r = tableNhanVien.getSelectedRow();
			if (r != -1) {
				if (validData()) {
					NhanVien nv = createNhanVien();
					if (nv_dao.updateNV(nv)) {
						JOptionPane.showMessageDialog(this, "Sua thanh cong");
						ArrayList<NhanVien> ds = nv_dao.getalltbNhanVien();
						DocDuLieuDatabaseVaoTable(ds);
						xoaTrang();
					} else
						JOptionPane.showMessageDialog(this, "Fail");
				}
			} else {
				JOptionPane.showMessageDialog(this, "Vui lòng chọn dòng cần sua");
			}
		}
	}

	@Override
	public void mouseClicked(MouseEvent e) {
		int row = tableNhanVien.getSelectedRow();
		txtMaNV.setText(modelNhanVien.getValueAt(row, 0).toString());
		txtHo.setText(modelNhanVien.getValueAt(row, 1).toString());
		txtTen.setText(modelNhanVien.getValueAt(row, 2).toString());
		txtTuoi.setText(modelNhanVien.getValueAt(row, 3).toString());

		// set trạng thái của JCheckBox
		chkNu.setSelected(modelNhanVien.getValueAt(row, 4).toString() == "Nữ" ? true : false);

		txtTienLuong.setText(modelNhanVien.getValueAt(row, 5).toString());
		cboPhongBan.setSelectedItem(modelNhanVien.getValueAt(row, 6).toString());
		txtMaNV.setEditable(false);
	}

	@Override
	public void mousePressed(MouseEvent e) {
		// TODO Auto-generated method stub

	}

	@Override
	public void mouseReleased(MouseEvent e) {
		// TODO Auto-generated method stub

	}

	@Override
	public void mouseEntered(MouseEvent e) {
		// TODO Auto-generated method stub

	}

	@Override
	public void mouseExited(MouseEvent e) {
		// TODO Auto-generated method stub

	}
}
